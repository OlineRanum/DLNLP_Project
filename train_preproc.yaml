# XNMT supports various ways to preprocess data as demonstrated in this example.
# Note that some preprocessing functionality relies on third-party tools.
!Experiment
  name: model_preprocessed
  exp_global: !ExpGlobal
    # define some named strings that can be used throughout the experiment config:
    placeholders:
      DATA_IN: src/preprocess/preprocessed_data/en_be
      DATA_OUT: output/en_be
      SRC_LAN: be
      TRG_LAN: en
  model: !DefaultTranslator
    src_reader: !PlainTextReader
      vocab: !Vocab
        vocab_file: '{DATA_IN}/train.vocab.{SRC_LAN}'
    trg_reader: !PlainTextReader
      vocab: !Vocab
        vocab_file: '{DATA_IN}/train.vocab.{TRG_LAN}'
    src_embedder: !SimpleWordEmbedder
      emb_dim: 512
    encoder: !BiLSTMSeqTransducer
      layers: 1
    attender: !MlpAttender
      hidden_dim: 512
      state_dim: 512
      input_dim: 512
    decoder: !AutoRegressiveDecoder
      embedder: !SimpleWordEmbedder
        emb_dim: 512
      rnn: !UniLSTMSeqTransducer
        layers: 1
      transform: !AuxNonLinear
        output_dim: 512
      bridge: !NoBridge {}
    inference: !AutoRegressiveInference
      post_process: join-piece
  train: !SimpleTrainingRegimen
    run_for_epochs: 100
    src_file: '{DATA_IN}/train.tok.norm.{SRC_LAN}'
    trg_file: '{DATA_IN}/train.tok.norm.{TRG_LAN}'
    dev_tasks:
      - !AccuracyEvalTask
        eval_metrics: bleu
        src_file: '{DATA_IN}/dev.tok.norm.{SRC_LAN}'
        ref_file: '{DATA_IN}/dev.norm.{TRG_LAN}'
        hyp_file: '{DATA_OUT}/{EXP}.dev_hyp'
      - !LossEvalTask
        src_file: '{DATA_IN}/dev.tok.norm.{SRC_LAN}'
        ref_file: '{DATA_IN}/dev.tok.norm.{TRG_LAN}'
  evaluate:
  - !AccuracyEvalTask
    eval_metrics: bleu
    src_file: '{DATA_IN}/test.tok.norm.{SRC_LAN}'
    ref_file: '{DATA_IN}/test.norm.{TRG_LAN}'
    hyp_file: '{DATA_OUT}/{EXP}.test_hyp'
