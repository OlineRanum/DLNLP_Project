# XNMT supports various ways to preprocess data as demonstrated in this example.
# Note that some preprocessing functionality relies on third-party tools.
!Experiment
  name: preproc
  exp_global: !ExpGlobal
    # define some named strings that can be used throughout the experiment config:
    placeholders:
      DATA_IN: training_files/data
      DATA_OUT:  training_files/preproc
  model: !DefaultTranslator
  src_reader: !PlainTextReader
    vocab: !Vocab
      vocab_file: training_files/preproc/train.vocab.ja
  trg_reader: !PlainTextReader
    vocab: !Vocab
      vocab_file: training_files/preproc/train.vocab.en
  src_embedder: !SimpleWordEmbedder
    emb_dim: 512
  encoder: !BiLSTMSeqTransducer
    layers: 1
  attender: !MlpAttender
    hidden_dim: 512
    state_dim: 512
    input_dim: 512
  decoder: !AutoRegressiveDecoder
    embedder: !SimpleWordEmbedder
      emb_dim: 512
    rnn: !UniLSTMSeqTransducer
      layers: 1
    transform: !AuxNonLinear
      output_dim: 512
    bridge: !NoBridge {}
  inference: !AutoRegressiveInference
    post_process: join-piece
  train: !SimpleTrainingRegimen
  run_for_epochs: 20
  src_file: '{DATA_OUT}/dev.tok.norm.ja'
  trg_file: '{DATA_OUT}/dev.tok.norm.en'
  dev_tasks:
    - !AccuracyEvalTask
      eval_metrics: bleu
      src_file: '{DATA_OUT}/dev.tok.norm.ja'
      ref_file: '{DATA_OUT}/dev.norm.en'
      hyp_file: training_files/output/{EXP}.dev_hyp
    - !LossEvalTask
      src_file: '{DATA_OUT}/dev.tok.norm.ja'
      ref_file: '{DATA_OUT}/dev.tok.norm.en'
  evaluate:
  - !AccuracyEvalTask
  eval_metrics: bleu
  src_file: '{DATA_OUT}/test.tok.norm.ja'
  ref_file: '{DATA_OUT}/test.norm.en'
  hyp_file: training_files/output/{EXP}.test_hyp